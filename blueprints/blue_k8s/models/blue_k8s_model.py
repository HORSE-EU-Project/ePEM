# generated by datamodel-codegen:
#   filename:  K8s_blue.json
#   timestamp: 2022-10-09T13:41:51+00:00

from __future__ import annotations

from enum import Enum
from ipaddress import IPv4Address, IPv4Network
from typing import List, Optional, Literal, Union
from pydantic import BaseModel, Field, conlist


class Cni(Enum):
    flannel = 'flannel'
    calico = 'calico'


class LbType(Enum):
    layer2 = 'layer2'
    layer3 = 'layer3'


class LBPool(BaseModel):
    mode: LbType = Field(
        'layer2', description='Operating mode of Metal-LB. Default Layer-2.'
    )
    net_name: str = Field(
        ..., description='name of the network in the topology'
    )
    ip_start: Optional[Union[str,IPv4Address]] = None
    ip_end: Optional[Union[str, IPv4Address]] = None
    range_length: Optional[int] = Field(
        None,
        description='Number of IPv4 addresses to reserved if no ip start and end are passed. Default 10 addresses.',
    )

    class Config:
        use_enum_values = True


class K8sNetworkEndpoints(BaseModel):
    mgt: str = Field(
        ..., description='name of the topology network to be used for management'
    )
    data_nets: List[LBPool] = Field(..., description='topology networks to be used by the load balancer')


class VMFlavors(BaseModel):
    memory_mb: str = Field(16384, alias='memory-mb')
    storage_gb: str = Field(32, alias='storage-gb')
    vcpu_count: str = Field(16, alias='vcpu-count')


class K8sAreaInfo(BaseModel):
    id: int
    core: Optional[bool] = False
    workers_replica: int
    worker_flavor_override: Optional[VMFlavors]


class K8sConfig(BaseModel):
    version: Optional[str] = "1.24"
    cni: Optional[Cni] = "flannel"
    linkerd: Optional[dict]
    pod_network_cidr: Optional[Union[str,IPv4Network]] \
        = Field('10.254.0.0/16', description='K8s Pod network IPv4 cidr to init the cluster')
    network_endpoints: K8sNetworkEndpoints
    worker_flavors: VMFlavors = VMFlavors()
    master_flavors: VMFlavors = VMFlavors()

    class Config:
        use_enum_values = True


class K8sBlueprintCreate(BaseModel):
    type: Literal['K8s']
    callbackURL: Optional[str] = Field(
        None,
        description='url that will be used to notify when the blueprint processing finishes',
    )
    config: K8sConfig
    areas: List[K8sAreaInfo]= Field(
        ...,
        description='list of areas to instantiate the Blueprint',
        min_items=1
    )

    class Config:
        use_enum_values = True


class K8sBlueprintScale(BaseModel):
    callbackURL: Optional[str] = Field(
        None,
        description='url that will be used to notify when the blueprint processing finishes',
    )
    operation: Literal['scale']
    add_areas: List[K8sAreaInfo]
    modify_areas: List[K8sAreaInfo]
    del_areas: List[K8sAreaInfo]


