---

- hosts: all
  become: yes
  ##gather_facts: no
  # the first part never run since using addplaybook function only tasks are important
  #vars:
  # these vars are going to add by the addplaybook function
#  vars:
#    - interfaces:
#      - int1
#      - int2
#    - cap2_name: "http_simples" #{{ cap2_name }}
#    - ip_gw:
#      - {ip: "10.0.10.24", gw: "10.0.10.254"}
#      - {ip: "10.0.11.24", gw: "10.0.11.254"}
#    - iname_ip_mask:
#        - { "iname": f"ansible_vars[0]['interfaces'][{counter}]", ip: "10.0.10.24", mask: "255.255.255.0" }
#        - { "iname": f"ansible_vars[0]['interfaces'][{counter}]", ip: "10.0.11.24", mask: "255.255.255.0" }
#    - "cl_s_ip": X.X.X.X ==> client start ip
#    - "cl_e_ip": X.X.X.X ==> client end ip
#    - "s_s_ip": X.X.X.X ==> server start ip
#    - "s_e_ip": X.X.X.X ==> server end ip

# Some modifications are done here:1- list of input is used for interfaces. 2-
  tasks:
    - name: update repisotory
      apt:
        update_cache: yes
        upgrade: yes
    # pre-requirements for debian
    #- name: install kernel headers on debian based systems
     # apt:
        # for specify kernel we use {{ }}
      #  name: linux-header-{{ ansible_kernel }}
       # state: present
        #update_cache: yes

    - name: install build-essential
      apt:
        name: build-essential
        state: present

    - name: install python3-distutils
      apt:
        name: python3-distutils
        state: present
        update_cache: yes

    # I think doesn't need
    # no it must be presented otherwise we will have error
    - name: create trex folder
      file:
        path: /opt/trex-v2.92
        state: directory

    - name: install unzip
      package:
        name: unzip

    - name: install trex on local machine/Download from http://192.168.17.60
      unarchive:
        src: http://192.168.17.60/ftp/upload/trex/v2.92.tar.gz
        dest: /opt/trex-v2.92
        remote_src: yes
        mode: 0755
        owner: root
        group: root

# Modify and create config files from input
#   Note: we can use block to copy all the lines to a new file !, here I chose to modify a created file
# Step1: create /etc/trex.cfg file and copy trex_07_cfg.yaml to /etc/trex_cfg.yaml. Then, modify the file.
# step2: create cap2 file regarding input parameter, it creates the file from the samples in /opt/cap2 and modify regarding the ip add and other input parameters
# step3: set temporarily IP address for the extra-nets to run (Do we need fixed IP !!!)

# start step1:
    - name: copy trex_07_cfg.yaml to /etc/trex_cfg.yaml
      shell: cp /opt/trex-v2.92/v2.92/cfg/trex_07_cfg.yaml /etc/trex_cfg.yaml

    - name: remove port limit
      lineinfile:
        path: /etc/trex_cfg.yaml
        regexp: '- port_limit:'
        state: absent

# im not sure if this is required, to be in safe side I did it
    - name: modify cfg file (version)
      lineinfile:
        path: /etc/trex_cfg.yaml
        regexp: 'version'
        line: "- version: 2"
        state: present

# Use list as input for interfaces
    - name: modify cfg file add interfaces
      lineinfile:
        path: /etc/trex_cfg.yaml
        regexp: 'interfaces:'
        line: "  interfaces: {{ interfaces }}"
        state: present

    - name: remove ip1,2
      lineinfile:
        path: /etc/trex_cfg.yaml
        regexp: '- ip:'
        state: absent

    - name: remove gw1,2
      lineinfile:
        path: /etc/trex_cfg.yaml
        regexp: 'default_gw'
        state: absent

# this part changed in comparison with previous version. I use list to more customize it
#    - name: add ips
#      lineinfile:
#        path: /etc/trex_cfg.yaml
#        #no need regexp because it first apply and does not apply insertafter
#        # regexp: 'port_info:'
#        insertafter: 'port_info:'
#        line: "      - ip: {{ net1_int_ip }}"
#        state: present
#    - name: add  ip1 line
#      lineinfile:
#        path: /etc/trex_cfg.yaml
#        #no need regexp because it first apply and does not apply insertafter
#        # regexp: 'port_info:'
#        insertafter: 'port_info:'
#        line: "      - ip: {{ net1_int_ip }}"
#        state: present
#
#    - name: add  gw1 line
#      lineinfile:
#        path: /etc/trex_cfg.yaml
#        #regexp: 'port_info:'
#        insertafter: 'ip:'
#        line: "        default_gw: {{ net1_gw }}"
#
#    - name: add  ip2 line
#      lineinfile:
#        path: /etc/trex_cfg.yaml
#        #regexp: 'port_info:'
#        insertafter: 'default_gw:'
#        line: "      - ip: {{ net2_int_ip }}"
#
#    - name: add  gw2 line
#      lineinfile:
#        path: /etc/trex_cfg.yaml
#        #regexp: 'port_info:'
#        insertafter: 'ip'
#        line: "        default_gw: {{ net2_gw }}"

# Using blockinfile
# The input should be a list of dictionaries {ip: "x.x.x.x", gw: "x.x.x.x"}
    - name: add ips and gateways using blockinline
      blockinfile:
        path: /etc/trex_cfg.yaml
        insertafter: 'port_info:'
        marker: "# {mark} ANSIBLE MANAGED BLOCK {{item.ip}}"
#        marker: ""
        block: |7
                 - ip: {{ item.ip }}
                   default_gw: {{ item.gw}}
        state: present
      with_items: "{{ ip_gw }}"


    - name: remove memory conditions
      lineinfile:
        path: /etc/trex_cfg.yaml
        regexp: '        dp_flows    :'
        state: absent

    - name: remove memory
      lineinfile:
        path: /etc/trex_cfg.yaml
        regexp: '  memory    : '
        state: absent

    - name: set socket equal to 0
      lineinfile:
        path: /etc/trex_cfg.yaml
        regexp: '- socket:'
        line: '        - socket: 0'
        state: present


    - name: modify threads
      lineinfile:
        path: /etc/trex_cfg.yaml
        regexp: 'threads:'
        line: "          threads: [2,3]"
        # There is a doubt here!! >>> since using two threads meaning number of CPU must be twice !!

# start step2: creating required cap2 file
# regarding the input only adding the reference file in this part is enough the rest configuration is done automatically
    - name: copy http_cap file to /etc/cap_customized.yaml
      shell: cp /opt/trex-v2.92/v2.92/cap2/http_simple.yaml /etc/cap_customized.yaml
      when: cap2_name|string == "http"

    - name: copy sfr_cap file to /etc/cap_customized.yaml
      shell: cp /opt/trex-v2.92/v2.92/cap2/sfr.yaml /etc/cap_customized.yaml
      when: cap2_name|string == "sfr"

    - name: copy tcp_cap file to /etc/cap_customized.yaml
      shell: cp /opt/trex-v2.92/v2.92/cap2/short_tcp.yaml /etc/cap_customized.yaml
      when: cap2_name|string == "tcp"

    - name: copy sip_cap file to /etc/cap_customized.yaml
      shell: cp /opt/trex-v2.92/v2.92/cap2/sip_short1.yaml /etc/cap_customized.yaml
      when: cap2_name|string == "sip"

# using with_item to do all together
# Need to modify in order to set range of clients ip for now its 1
    - name: creating and modifyin cap_customized.yaml file
      lineinfile:
        path: "{{ item.dest }}"
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        state: present
      with_items:
        - {dest: '/etc/cap_customized.yaml', regexp: "clients_start", line: "          clients_start : {{ net1_int_ip }}"}
        - {dest: '/etc/cap_customized.yaml', regexp: "clients_end", line: "          clients_end : {{ net1_int_ip }}"}
        - {dest: '/etc/cap_customized.yaml', regexp: "servers_start", line: "          servers_start : {{ net2_int_ip }}"}
        - {dest: '/etc/cap_customized.yaml', regexp: "servers_end", line: "          servers_end : {{ net2_int_ip }}"}
        - {dest: '/etc/cap_customized.yaml', regexp: "clients_per_gb", line: "          clients_per_gb : 10"}
        - {dest: '/etc/cap_customized.yaml', regexp: "min_clients", line: "          min_clients : 101"}
#        - {dest: '/etc/cap_customized.yaml', regexp: "cps", line: "       cps : 1.1"}
#        - {dest: '/etc/cap_customized.yaml', regexp: "ipg", line: "       ipg : 1000"}
#        - {dest: '/etc/cap_customized.yaml', regexp: "rtt", line: "       rtt : 1000"}

# make it more general, configured all cap files with small values of cps, ipg and rtt
    - name: modify caps, ipg, rtt values in cap_customized.yaml
      replace:
        path: "{{ item.dest }}"
        regexp: "{{ item.regexp }}"
        replace: "{{ item.replace }}"
      with_items:
        - {dest: '/etc/cap_customized.yaml', regexp: '(cps : \d*.\d*)', replace: "cps : 1.1"} # this regexp used group but is the same
        - {dest: '/etc/cap_customized.yaml', regexp: 'ipg : \d*.\d*', replace: "ipg : 1000"}
        - {dest: '/etc/cap_customized.yaml', regexp: 'rtt : \d*.\d*', replace: "rtt : 1000"}

    # Set not permanent ip address using list

#    - name: Set temporary Net1 Ip address
#      shell: ifconfig ens4 10.0.10.195 netmask 255.255.255.0
    - name: set temporary ip address for the interfaces
      shell: ifconfig {{ "item.iname" }} {{ "item.ip" }} netmask {{ "item.mask" }}
      with_items:
        - "{{ iname_ip_mask }}"


    # added vars from ansible_vars (run_duration, cap2_name) list of dictionaries.
    - name: run trex scritps
#      shell: nohup ./t-rex-64  --cfg /etc/trex_cfg.yaml -f cap2/cap_customized.yaml -d {{ run_duration }} –m 1 –c 1 –k 5 --nc > first_run_logs.txt
      shell: ./t-rex-64  --cfg /etc/trex_cfg.yaml -f /etc/cap_customized.yaml -d {{ run_duration }} –m 1 –c 1 –k 5 --nc > first_run_logs.txt
      args:
        chdir: /opt/trex-v2.92/v2.92

    # this works but now removed to check the vars
#    - name: run trex scritps
#      shell: nohup ./t-rex-64  --cfg /etc/trex_cfg.yaml -f cap2/http_simple_mirej.yaml -d 10 –m 1 –c 1 –k 5 --nc > first_run_logs.txt
#      args:
##        chdir:  /opt/trex-{{ trex_version }}/{{ trex_version }}

    - name: get trex results file
      shell: cat /opt/trex-v2.92/v2.92/first_run_logs.txt
      register: trex_results_file
#
    - name: return trex results
      debug:
        msg: "{{ trex_results_file }}"
