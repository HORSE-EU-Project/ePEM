/*
 * ltemme configuration file automatically built by CNIT NFVCL
 */
{
  license_server: {
     server_addr: "{{confvar.license_server}}"
  },
  log_options: "all.level=error,all.max_size=0,nas.level=debug,nas.max_size=1,s1ap.level=debug,s1ap.max_size=1,ngap.level=debug,ngap.max_size=1,rx.level=debug,rx.max_size=1,cx.level=debug,cx.max_size=1",
  log_filename: "/tmp/mme.log",
  com_addr: "0.0.0.0:9000",

  gtp_addr: "{{confvar.gtp_addr}}",
  plmn: "{{confvar.plmn}}",
  mme_group_id: 32769,
  mme_code: {{confvar.mme_code}},

  ims_vops: true, /* IMS supported */
  //emc_bs: true, /* emergency calls supported */
  //emc: 1, /* NR connected to 5GCN emergency calls supported */
  emergency_number_list: [
      /* Category bits: (Table 10.5.135d/3GPP TS 24.008)
         Bit 1 Police
         Bit 2 Ambulance
         Bit 3 Fire Brigade
         Bit 4 Marine Guard
         Bit 5 Mountain Rescue
      */
    { category: 0x1f, digits: "911" },
    { category: 0x1f, digits: "112" },
  ],

  rx: {
    qci: {audio: 1, video: 2},
  },

  /* network name and network short name sent in the EMM information message to the UE */
  network_name: "{{confvar.network_name}}",
  network_short_name: "{{confvar.network_short_name}}",

  /* Control Plane Cellular IoT EPS optimization support */
  cp_ciot_opt: true,

  /* DCNR support */
  nr_support: true,

  /* 15 bearers support */
  fifteen_bearers: false,

  ims_list: [{ims_addr: "127.0.0.1", bind_addr: "127.0.0.2"}],

  /* AMF slices configuration */
  {%- if 'nssai' in confvar %}
  nssai: [
      {%- for s in confvar.nssai %}
          {
            sst: {{s.sst}},
            {%- if 'sd' in s %}
            sd: {{s.sd}},
            {%-  endif %}
          }
      {%- endfor %}
      ]
  {%-  endif %}
  /*nssai: [
   {
    sst: 1,
   },
   {
    sst: 2,
   },
   {
    sst: 3,
    sd: 50,
   }
  ],*/

  /* Public Data Networks. The first one is the default. */
  pdn_list: [
    {%-  if 'pdn' in confvar %}
    {%-  for p in confvar.pdn %}
    {
      pdn_type: "{{p.type}}",
      access_point_name: "{{p.name}}",
        {%-  if p.type == "ipv4" or p.type == "ipv4v6" %}
      first_ip_addr: "{{p.first_ip4}}",
      last_ip_addr: "{{p.last_ip4}}",
      ip_addr_shift: {{p.shift_ip4}}, /* difference between allocated IP addresses is 4 */
        {%- endif %}
        {%-  if p.type == "ipv6" or p.type == "ipv4v6" %}
      first_ipv6_prefix: "{{p.first_ip6}}",
      last_ipv6_prefix: "{{p.last_ip6}}",
        {%- endif %}
        {%-  if 'p_cscf_addr' in p %}
        p_cscf_addr: "{{p.p_cscf_addr }}",
        {%- endif %}
      dns_addr: "{{p.dns_list}}",
      erabs: [
        {%-  for e in p.erabs %}
        {
          qci: {{e.qci}},
          priority_level: {{e.prio}},
          pre_emption_capability: "shall_not_trigger_pre_emption",
          pre_emption_vulnerability: "not_pre_emptable",
        },
        {%- endfor %}
      ],
      {%-  if 'slices' in p %}
      slices: [
        {%-  for s in p.slices %}
        {
          snssai: {
            sst: {{s.sst}},
            {%-  if 'sd' in s %}
            sd: {{s.sd}},
            {%- endif %}
          },
       qos_flows: [
        {%-  for f in s.qos_flows %}
        {
         "5qi": {{f.fiveqi}},
          priority_level: {{f.prio}},
          pre_emption_capability: "shall_not_trigger_pre_emption",
          pre_emption_vulnerability: "not_pre_emptable",
        },
        {%- endfor  %}
       ],
        }
        {%- endfor  %}
      ]
      {%- endif %}
    },
    {%- endfor  %}
    {%- endif %}
  ],

  /* Setup script for the network interface.
     If no script is given, no network interface is created.
     Script is called for each PDN with following parameters:
        1) Interface name
        2) PDN index
        3) Access Point Name
        4) IP version: 'ipv4' or 'ipv6'
        5) IP address: first IP address for ipv4 and link local address for IPv6
        6) First IP address
        7) Last IP address
  */
  tun_setup_script: "mme-ifup",

  /* NAS ciphering algorithm preference. EEA0 is always the last. */
  nas_cipher_algo_pref: [ ],
  /* NAS integrity algorithm preference. EIA0 is always the last. */
  nas_integ_algo_pref: [ 2, 1 ],

  /* user data base */
  include "{{confvar.ue_db_file}}",

  /* persistent user database */
  //ue_db_filename: "lte_ue.db",
}
