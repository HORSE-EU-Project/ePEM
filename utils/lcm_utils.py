import json
from datetime import datetime
from blueprints.blueprint_beta import BlueprintBaseBeta
from models.blueprint.blueprint_base_model import BlueNSD
from utils import persistency
from utils.util import remove_files_by_pattern
from utils.log import create_logger
from nfvo import NbiUtil, get_nsd_name
import time

logger = create_logger("LCM UTILS")


def instantiate_blueprint(vims: list, nsd_names: list, osmNbiUtil: NbiUtil, blue: BlueprintBaseBeta):
    blue.set_timestamp('day0_buildpackages_start')
    logger.debug('Blue {} - Day0 - building NSD packages'.format(blue.get_id()))

    # Day0 handlers must return the names of nsd to be instantiated
    blue.build_packages(nsd_names=nsd_names)

    blue.set_timestamp('day0_onboarding_start')
    nsd_list = []

    for nsd_name in nsd_names:
        # NOTE: we could support here OSM catalogues

        r = osmNbiUtil.nsd_reonboard(nsd_name)

        if r['error']:
            logger.error("Blue {} - Day0 onboarding nsd {} failed, reason: {}"
                         .format(blue.get_id(), nsd_name, json.dumps(r['data'])))
            blue.set_osm_status(nsd_name, 'error')
            raise AssertionError("Blue {}: Day0 onboarding nsd {} failed, reason: {}"
                                 .format(blue.get_id(), nsd_name, json.dumps(r['data'])))
            # return False

        # addinng nsd id to the Blue
        blue.add_osm_nsd(nsd_name, r['data']['id'])
        blue.set_osm_status(nsd_name, 'onboarded')

        nsd_list.append({'nsd_id': r['data']['id'], 'name': nsd_name})

    blue.set_timestamp("day0_end")

    # Day1 starts from here
    # Getting the matching NSDs
    nsd_list = [nsd for nsd in blue.get_nsd() if nsd.descr.nsd.nsd[0].name in nsd_names]
    for nsd_item in nsd_list:
        nsd_name_pos_zero = nsd_item.descr.nsd.nsd[0].name
        logger.info("Blue {} - Day1 - instantiating NSD={} on VIM {}"
                    .format(blue.get_id(), nsd_name_pos_zero, nsd_item.vim))

        nsd_name = nsd_name_pos_zero
        vim_ = next(v_ for v_ in vims if v_['name'] == nsd_item.vim)
        r = osmNbiUtil.instantiate_ns(
            nsd_item.nsd_id,
            nsd_name,
            "automatically generated by CNIT S2N NFVCL",
            vim_['_id'],
            blue.deploy_config(nsd_item.nsd_id)
        )
        if r['error']:
            logger.error("Blue {}: Day1 nsd {} instantiation failed, reason: {}"
                         .format(blue.get_id(), nsd_name, json.dumps(r['data'])))
            blue.set_osm_status(nsd_name, 'error')
            return False

        blue.add_osm_nsi(nsd_name, r['data']['id'])
        blue.set_osm_status(nsd_name, 'day1')
    return True


def day0_operation(handler, checked_vims: list, msg: dict, osmNbiUtil: NbiUtil, blue: BlueprintBaseBeta):
    logger.info("Blue {} - starting Day 0 operations".format(blue.get_id()))
    # run the method to create blue's NSDs
    nsd_names = getattr(blue, handler['method'])(msg)
    # instantiate nsd
    if instantiate_blueprint(checked_vims, nsd_names, osmNbiUtil, blue) is False:
        return False
    blue.to_db()
    # wait for NSDs becoming ready
    if wait_for_blue_day1(nsd_names, osmNbiUtil, blue) is False:
        return False
    blue.to_db()
    # Get IP addresses of VNFs
    blue.get_ip()
    # save blue binary dump
    return True


def wait_for_blue_day1(ns_to_check: list, osmNbiUtil: NbiUtil, blue: BlueprintBaseBeta):
    blue.set_timestamp('day1_osm')

    logger.debug("Blue {} - wait_for_blue_day1(): number of NSI to check: {}"
                 .format(blue.get_id(), str(len(ns_to_check))))

    nsi_list = []
    for ns_item in blue.get_nsd():
        if get_nsd_name(ns_item.descr.dict(by_alias=True)) in ns_to_check:
            nsi_list.append(ns_item.nsi_id)

    # NFVCL callbacks are not working in OSM -- commented code for future usage

    # callback_url = 'http://{}:{}/nfvcl/callback'.format(nfvcl_ip, str(nfvcl_port))
    # subscribe to osm
    # for nsi in nsi_list:
    #    if not nbiUtil.subscribe_ns_notifications(nsi, callback_url):
    #        logger.error("Blue {} - not possible to subscribe to events of service {}"
    #                     .format(blue.get_id(), nsi, callback_url))
    #        return False

    while len(ns_to_check) > 0:
        time.sleep(5)
        for ns_item in blue.get_nsd():
            nsd_name = ns_item.descr.nsd.nsd[0].name
            if nsd_name in ns_to_check:
                try:
                    r = osmNbiUtil.check_ns_instance(ns_item.nsi_id)
                except ValueError as value_exception:
                    logger.error('ValueError received')
                    logger.error(value_exception)
                    if len(value_exception.args) > 0 and \
                            "Deploying at VIM: b\'\'" in value_exception.args[0]:
                        logger.warning("Blue {} - NSI {} failed during day1 operations. Trying to recover."
                                       .format(blue.get_id(), ns_item.nsi_id))
                        osmNbiUtil.ns_delete(ns_item.nsi_id, True)
                        r = osmNbiUtil.instantiate_ns(
                            ns_item.nsd_id,
                            nsd_name,
                            "automatically generated by CNIT S2N NFVCL",
                            ns_item.deploy_config.vimAccountId,
                            blue.deploy_config(ns_item.nsd_id)
                        )
                        if r['error']:
                            logger.error("Blue {} - Day1 nsd {} instantiation failed, reason: {}"
                                         .format(blue.get_id(), nsd_name, json.dumps(r['data'])))
                            raise ValueError('Healing operation on NS not successful')
                        blue.add_osm_nsi(nsd_name, r['data']['id'])
                        logger.warning('Blue {} - the new nsi_id is {}'.format(blue.get_id(), r['data']['id']))
                        blue.set_osm_status(nsd_name, 'day1')
                        # restart day 1 waiting loop
                        return wait_for_blue_day1(ns_to_check, osmNbiUtil, blue)
                    else:
                        logger.warning('Exception not handled for self-healing')
                        raise value_exception

                logger.info("Blue {} - nsi: {} status: {}"
                            .format(blue.get_id(), ns_item.nsi_id, r["config-status"]))
                if r["config-status"] == 'configured':
                    ns_to_check.remove(nsd_name)
                    blue.set_osm_status(nsd_name, 'day2')
                    blue.set_timestamp('day1_end:' + nsd_name)
                if "error" in r["config-status"] or "blocked" in r["config-status"] or \
                        "failed" in r["config-status"] or "failed" in r['operational-status']:
                    ns_to_check.remove(nsd_name)
                    blue.set_osm_status(nsd_name, r["config-status"])
                    return False
    logger.info("Blue {} - instantiation completed".format(blue.get_id()))
    blue.set_timestamp('day1_end')
    return True


def day2_operation(handler, msg: dict, osmNbiUtil: NbiUtil, blue: BlueprintBaseBeta, db: persistency.DB):
    logger.info("Blue {} - starting Day 2 operations".format(blue.get_id()))
    if handler.get('callback') is not None:
        init_day2(getattr(blue, handler['method'])(msg),
                  blue,
                  osmNbiUtil,
                  db,
                  blue_callback=getattr(blue, handler['callback']))
    else:
        init_day2(getattr(blue, handler['method'])(msg),
                  blue,
                  osmNbiUtil,
                  db)
    # Updating blueprint in the database
    blue.to_db()


def init_day2(day2_primitives, blue: BlueprintBaseBeta, osmNbiUtil: NbiUtil, db: persistency.DB, blue_callback=None):
    blue.set_timestamp('day2_start')

    error_day2 = False
    results = []

    for p in day2_primitives:
        blue.set_timestamp("day2_start_nsd_{}_primitive_{}".format(p['ns-name'],
                                                                   str(p['primitive_data']['member_vnf_index'])))

        osm_ns: BlueNSD = blue.get_osm_ns_byname(p['ns-name'])

        # Taking the nsi id from OSM_NS if not present in the primitive
        nsi_id = osm_ns.nsi_id if 'nsi_id' not in p else p['nsi_id']

        r = osmNbiUtil.execute_primitive(nsi_id, p['primitive_data'])

        results.append({"result": r, "primitive": p, "time": datetime.now()})
        blue.store_primitives(results[-1])

        blue.set_timestamp("day2_stop_nsd_{}_primitive_{}".format(p['ns-name'],
                                                                  str(p['primitive_data']['member_vnf_index'])))
        blue.set_configlen("day2_stop_nsd_{}_primitive_{}".format(p['ns-name'],
                                                                  str(p['primitive_data']['member_vnf_index'])),
                           p['primitive_data']['primitive_params'])

        if "completed" in r['charm_status']:
            blue.set_osm_status(p['ns-name'], 'day2')
            logger.info("Blue {} - {} correctly configured".format(blue.get_id(), p['ns-name']))
        else:
            error_day2 = True
            blue.set_osm_status(p['ns-name'], 'day2 error')
            logger.error("Blue {} - Day 2 - nsd {} failed in Day2 operations: {}"
                         .format(blue.get_id(), p['ns-name'], json.dumps(r)))

    if error_day2:
        logger.error("Blue {} - Day 2 - Error applying Day2 operations".format(blue.get_id()))
        return False

    # Day2 callback for the Blueprint object
    if blue_callback is not None:
        logger.info("Blue {} - Performing Day 2 callback".format(blue.get_id()))
        blue_callback(results)

    blue.set_timestamp('day2_end')
    db.insert_DB("nfv_performance", blue.get_performance())
    return True


def destroy_blueprint(osmNbiUtil: NbiUtil, blue: BlueprintBaseBeta, db: persistency.DB):
    """
    Destroy the blueprint.
        - Delete all network services relative to that blueprint (init_dayN).
        - Remove all network service descriptors (init_dayN).
        - Remove all virtual network function descriptors (init_dayN).
        - Remove all day2 files, vnf packages and nsd_packages.
        - Call blueprint destroy method.
    Args:
        osmNbiUtil: The OSM util to be used for NS, NSD and VNFD deletion
        blue: The blueprint to be deleted
        db: The database in witch information is deleted from.

    Returns:

    """
    blue.base_model.status = 'processing'
    blue.base_model.current_operation = 'Destroy'
    blue.base_model.detailed_status = 'Removing Network Service instances'
    blue.to_db()

    # For each network service we check if it has been instantiated and has ID. In that case it needs to be deleted
    nsi_list_to_delete = []
    for nsd in blue.get_nsd():
        if not hasattr(nsd, 'nsd_id'):
            logger.warning("Blue {} - no nsd id for this nsd ... skipping!".format(blue.get_id()))
            continue

        if hasattr(nsd, 'nsi_id'):
            logger.info("Blue {} - deleting nsi= {}".format(blue.get_id(), nsd.nsi_id))
            nsi_list_to_delete.append(nsd.nsi_id)
        else:
            logger.warning("Blue {} - no nsi id for nsd {}... skipping!".format(blue.get_id(), nsd.nsd_id))

    init_dayN(nsi_list_to_delete, osmNbiUtil=osmNbiUtil, blue=blue)

    blue.base_model.detailed_status = 'Destroying blueprint and temporary files'
    blue.to_db()
    logger.debug("Blue {} - Removing temporary day2 files".format(blue.get_id()))
    try:
        remove_files_by_pattern("day2_files", '_{}*'.format(blue.get_id()))
        remove_files_by_pattern("day2_files", '{}_*'.format(blue.get_id()))
        remove_files_by_pattern("vnf_packages", '{}_*'.format(blue.get_id()))
        remove_files_by_pattern("/tmp/nsd_packages", '*_{}*'.format(blue.get_id()))
        remove_files_by_pattern("/tmp/nsd_packages", '{}_*'.format(blue.get_id()))
    except FileNotFoundError as error:
        logger.info("{}".format(error))

    logger.debug("Blue {} - Deleting blueprint".format(blue.get_id()))
    db.delete_DB("action_output", {'blue_id': blue.get_id()})
    blue.destroy()


def dayN_operation(handler, msg: dict, osmNbiUtil: NbiUtil, blue: BlueprintBaseBeta):
    """
    Handle dayN operations for the blueprint. (i.e. deleting a VNF from a certain blueprint). Call the DayN method of
    the blueprint that should return a list of NS to be deleted. Then call
    Args:
        handler: The method (inside the blueprint) that will handle the operation. See supported operations in
        the blueprint object
        msg: The message to be passed at the handler.
        osmNbiUtil: The OSM utils to be used
        blue: The target blueprint.

    Returns:

    """
    logger.info("Blue {} - starting dayN operations".format(blue.get_id()))
    # Call The blueprint handler for dayN operation
    nsi_list_to_delete = getattr(blue, handler['method'])(msg)
    # Delete NSs
    init_dayN(nsi_list_to_delete, osmNbiUtil, blue)


def init_dayN(nsi_list, osmNbiUtil: NbiUtil, blue: BlueprintBaseBeta):
    """
    Handle the dayN of Network services. Call OSM for:
        - Delete all network services in the list.
        - Remove all network service descriptors of NSs.
        - Remove all virtual network function descriptors of NSs.
    Args:
        nsi_list: The network service identifier list to be deleted.
        osmNbiUtil: The OSM utils to be used for deleting NS, NSD and VNFD from OSM.
        blue: The blueprint to witch the NSs belong.

    Returns:

    """
    if nsi_list is None:
        logger.info("Blue {} - no dayN operations to be performed, nsi list is None".format(blue.get_id()))
        return True

    nsd_to_delete = []
    vnfd_to_delete = []

    # Get NSD and VNFD of network services to be deleted
    for nsi in nsi_list:
        nsd_conf = next((nsd for nsd in blue.base_model.nsd_ if nsd.nsi_id == nsi), None)
        if nsd_conf is None:
            logger.warning('NSI {} non found in blue {}, continuing...'.format(nsi, blue.get_id()))
            continue
        if hasattr(nsd_conf, 'nsd_id'):
            nsd_to_delete.append(nsd_conf.nsd_id)
        for v in nsd_conf.descr.nsd.nsd[0].vnfd_id:
            vnfd_to_delete.append(v)

    # Asking OSM to delete ns list
    for nsi in nsi_list:
        logger.debug("Blue {} - DayN - terminating NS <{}>".format(blue.get_id(), nsi))
        r = osmNbiUtil.ns_delete(nsi)
        logger.debug(
            "Blue {} - DayN - nsi {} termination result: {}".format(blue.get_id(), nsi, json.dumps(r)))

    nsi_to_check = nsi_list[:]  # Make a copy NOT by reference
    # TODO Check if infinite loop is possible or if the while is repeated fast (add a pause)
    while len(nsi_to_check) > 0:
        vnfo_nsi_list = osmNbiUtil.get_nsi_list()
        if vnfo_nsi_list is None:
            logger.warning("Blue {} - NSI list not found in the NFVO. Skipping...".format(blue.get_id()))
            break

        for index, nsi in enumerate(nsi_to_check):
            nsi = next((item for item in vnfo_nsi_list if item['id'] == nsi), None)
            if nsi is None:
                logger.debug('Blue {} - NS instance {} deleted'.format(blue.get_id(), nsi))
                nsi_to_check.pop(index)

    # Deleting NSDs
    for nsd in nsd_to_delete:
        logger.debug("Blue {} - DayN - deleting nsd {}".format(blue.get_id(), nsd))
        r = osmNbiUtil.nsd_delete(nsd)
        logger.debug("Blue {} - DayN - nsd {} deletion result: {}".format(blue.get_id(), nsd, json.dumps(r)))

    nfvo_vnfd_list = osmNbiUtil.get_vnfd_list()
    logger.info("Blue {}: deleting VNFDs".format(blue.get_id(), vnfd_to_delete))
    logger.debug("Blue {}: VNFD to be deleted: {}".format(blue.get_id(), vnfd_to_delete))
    for vnfd in vnfd_to_delete:
        nfvo_vnfd = next((item for item in nfvo_vnfd_list if item['id'] == vnfd), None)
        if nfvo_vnfd is None:
            continue
        logger.debug("Blue {} - DayN - deleting vnfd {} {}".format(blue.get_id(), nfvo_vnfd['id'],
                                                                   nfvo_vnfd['_id']))
        r = osmNbiUtil.delete_vnfd(nfvo_vnfd['_id'])
        logger.debug("Blue {} - DayN - vnfd {} {} deletion result:".format(blue.get_id(), nfvo_vnfd['id'],
                                                                           nfvo_vnfd['_id'], json.dumps(r)))

    for nsi in nsi_list:
        blue.delete_nsd(nsi)


def checkVims(vims, osmNbiUtil: NbiUtil):
    """
    Checks that all VIMs are present on OSM
    Args:
        vims: the list of vim to be checked

    Returns:
        the input list if all the VIMs are onboarded on OSM.
    """
    vim_list = list()

    for vim in vims:
        vim_object = osmNbiUtil.get_vim_by_tenant_and_name(vim['name'], vim['vim_tenant_name'])
        if vim_object is None:
            raise AssertionError('VIM {} not onboarded on OSM (the NFVO)'.format(vim['name']))
        vim_list.append(vim_object)

    return vim_list
