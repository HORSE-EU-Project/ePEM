from typing import List, Optional
from pydantic import BaseModel, Field, field_serializer
from models.charm_models import LCMOperationConfig
from models.network import PduInterface


class VirtualComputeDescr006(BaseModel):
    id: str
    virtual_cpu: dict = Field(alias='virtual-cpu')
    virtual_memory: dict = Field(alias='virtual-memory')


class VirtualStorageDescr006(BaseModel):
    id: str
    size_of_storage: int = Field(alias="size-of-storage")


class VDULevel(BaseModel):
    vdu_id: str = Field(alias='vdu-id')
    number_of_instances: int = Field(alias='number-of-instances')


class VDUProfile(BaseModel):
    id: str
    min_number_of_instances: int = Field(alias='min-number-of-instances')


class InstantiationLevel(BaseModel):
    id: str = Field(default='default-instantiation-level')
    vdu_level: List[VDULevel] = Field(alias='vdu-level', default=[])


class DF(BaseModel):
    id: str = Field(default="default-df")
    instantiation_level: List[InstantiationLevel] = Field(alias='instantiation-level', default=[InstantiationLevel()])
    vdu_profile: List[VDUProfile] = Field(alias='vdu-profile', default=[])
    lcm_operations_configuration: Optional[LCMOperationConfig] = Field(alias='lcm-operations-configuration', default=None)


class KDU(BaseModel):
    name: str
    helm_chart: str = Field(alias='helm-chart')


class KDUnet(BaseModel):
    id: str


class KDUcluster(BaseModel):
    nets: List[dict] = Field(default=[])


class ExtCPD(BaseModel):
    id: str
    int_cpd: Optional[dict] = Field(default=None, alias='int-cpd')
    k8s_cluster_net: Optional[str] = Field(default=None, alias='k8s-cluster-net')


class IntCPD(BaseModel):
    id: str
    virtual_network_interface_requirement: List[dict] = Field(alias='virtual-network-interface-requirement')
    port_security_enabled: Optional[bool] = Field(default=False, alias='port-security-enabled')


class VDUSol006Descriptor(BaseModel):
    id: str
    name: str
    int_cpd: List[IntCPD] = Field(alias='int-cpd')
    pdu_type: Optional[str] = Field(default=None, alias='pdu_type')
    sw_image_desc: Optional[str] = Field(default=None, alias="sw-image-desc")
    virtual_compute_desc: Optional[str] = Field(default=None, alias="virtual-compute-desc", description="Must be a valid existing id")
    virtual_storage_desc: Optional[List[str]] = Field(default=None, alias="virtual-storage-desc", description="Must be a valid existing id")
    monitoring_parameter: Optional[List[dict]] = Field(default=None, alias='monitoring-parameter')
    cloud_init_file: Optional[str] = Field(default=None, alias='cloud-init-file')


class VNFSol006Descriptor(BaseModel):
    """
    VNFD SOL006 compliant descriptor
    """
    id: str
    product_name: str = Field(alias='product-name')
    version: float = Field(default=2.0)
    description: str = Field(default='VNFd automatically generated by the NFVCL')
    provider: str = Field(default="CNIT S2N Lab")
    mgmt_cp: str = Field(alias="mgmt-cp")
    vdu: List[VDUSol006Descriptor] = Field(default=[])
    kdu: List[KDU] = Field(default=[])
    df: List[DF] = Field(default=[DF()])
    ext_cpd: List[ExtCPD] = Field(default=[], alias='ext-cpd')
    sw_image_desc: List[dict] = Field(default=[], alias="sw-image-desc")
    virtual_compute_desc: List[VirtualComputeDescr006] = Field(default=[], alias='virtual-compute-desc')
    virtual_storage_desc: List[VirtualStorageDescr006] = Field(default=[], alias='virtual-storage-desc')
    k8s_cluster: Optional[KDUcluster] = Field(alias='k8s-cluster', default=None)

    @field_serializer('kdu', 'vdu', 'df', 'ext_cpd', 'sw_image_desc', 'virtual_compute_desc', 'virtual_storage_desc')
    @classmethod
    def serialize_dt(self, list_to_ser: List, _info):
        """
        If the list is empty return None such that when the model is serialized -> Empty list are not included in the
        dump of the model.
        WARNING: use exclude_none option when serializing the model:
            model.model_dump(by_alias=True, exclude_none=True)

        Args:
            list_to_ser: The list to be serialized
            _info:

        Returns:
            None if the list is None or empty. The list content otherwise.
        """
        if list_to_ser is None:
            return None
        elif isinstance(list_to_ser, list):
            if len(list_to_ser) > 0:
                return list_to_ser
            else:
                return None
        else:
            return None



class PDUSol006Model(BaseModel):
    name: str
    type: str
    shared: bool = Field(default=True)
    vim_accounts: List = Field(default=[])
    interfaces: List[PduInterface] = Field(default=[])


